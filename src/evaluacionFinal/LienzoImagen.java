/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

package evaluacionFinal;

import java.awt.Dimension;
import java.awt.Graphics;
import java.awt.Graphics2D;
import java.awt.RenderingHints;
import java.awt.image.BufferedImage;

/**
 *
 * @author Alvaro
 */
public class LienzoImagen extends Lienzo {

    /**
     * Creates new form LienzoImagen
     */
    public LienzoImagen() {
        initComponents();
    }
    
    private BufferedImage img = null;
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        setBackground(new java.awt.Color(255, 255, 255));
        setPreferredSize(new java.awt.Dimension(300, 300));

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 400, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 300, Short.MAX_VALUE)
        );
    }// </editor-fold>//GEN-END:initComponents

    /**
     *
     * @param g
     */
    @Override
    public void paintComponent(Graphics g){
        super.paintComponent(g);
        if(img!=null) g.drawImage(img,0,0,this);
    }
    public BufferedImage getImagen(){
        return this.img;
    }
    public void setImagen(BufferedImage imag, String ancho, String alto){
        this.img=imag;
        int altura =Integer.parseInt(alto);
        int anchura = Integer.parseInt(ancho);
        img=redimensionar(img,anchura,altura);
        setPreferredSize(new Dimension(img.getWidth(),img.getHeight()));
       
    }
    public void setImagen(BufferedImage imag, int ancho, int alto){
        this.img=imag;
        img=redimensionar(img,ancho,alto);
        setPreferredSize(new Dimension(img.getWidth(),img.getHeight()));
       
    }
    public void setImagen(BufferedImage imag){
        this.img=imag;
       
        setPreferredSize(new Dimension(img.getWidth(),img.getHeight()));
        
    }
     public static BufferedImage redimensionar(BufferedImage imag, int nuevaAnchura, int nuevaAltura) {
        int anchoAnterior = imag.getWidth();
        int altoAnterior = imag.getHeight();
        BufferedImage redimensionada = new BufferedImage(nuevaAnchura, nuevaAltura, imag.getType());
        Graphics2D g = redimensionada.createGraphics();
        g.setRenderingHint(RenderingHints.KEY_INTERPOLATION, RenderingHints.VALUE_INTERPOLATION_BILINEAR);
        g.drawImage(imag, 0, 0, nuevaAnchura, nuevaAltura, 0, 0, anchoAnterior, altoAnterior, null);
        g.dispose();
        return redimensionada;
    }
    public void vuelque(){
        Graphics g = img.createGraphics();        
        this.paintShapes(g);  
    }
    
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    // End of variables declaration//GEN-END:variables
}

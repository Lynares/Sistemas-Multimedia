/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

package evaluacionFinal;

import java.awt.BorderLayout;
import java.awt.Component;
import java.awt.Image;
import java.awt.image.BufferedImage;
import java.io.File;
import java.io.IOException;
import javax.media.Buffer;
import javax.media.CannotRealizeException;
import javax.media.Manager;
import javax.media.MediaLocator;
import javax.media.NoPlayerException;
import javax.media.Player;
import javax.media.control.FrameGrabbingControl;
import javax.media.format.VideoFormat;
import javax.media.util.BufferToImage;

/**
 * Ventana de reproducción de video. 
 * @author Alvaro Maximino Linares Herrera
 */
public class VentanaInternaJMFPlayer extends javax.swing.JInternalFrame {
    private Player p = null;
    /**
     * Constructor de VentanaInternaJMFPlayer
     */
    private VentanaInternaJMFPlayer(File f) {
        initComponents();
        try {   
            this.setLayout(new BorderLayout());
            this.setSize(350,280);
             MediaLocator ml = new MediaLocator("file:"+f.getAbsolutePath());   
             p = Manager.createRealizedPlayer(ml);           
             Component  areaVisual = p.getVisualComponent();           
             if(areaVisual!=null) this.add(areaVisual, BorderLayout.NORTH);            
             Component  panelControl = p.getControlPanelComponent();
             if(panelControl!=null) this.add(panelControl, BorderLayout.SOUTH);         
             p.start();    
         } catch(IOException | CannotRealizeException | NoPlayerException e) {
              System.err.println("Error al crear el player");
         }  
        
    } 
    /**
     * Este método llama al constructor de la clase y nos devuelve la VentanaInternaJMFPlayer.
     * @param f File, archivo que reproduciremos.
     * @return VentanaInternaJMFPlayer en la que controlaremos la reproducción del video.
     */
    public static VentanaInternaJMFPlayer getInstance(File f){
        VentanaInternaJMFPlayer v = new VentanaInternaJMFPlayer(f);
        return v;
    }
     /**
     * Método para iniciar la visualización del video.
     */
    public void play(){
        p.start();
    }
     /**
     * Método para parar la visualización del video.
     */
    public void close(){
        p.close();
    }
    /**
     * Nos devuelve el Player de la clase.
     * @return objeto tipo Player
     */
    public Player getPlayer(){
        return p;
    }
    /**
     * Este método sirve para obtener una captura del video que estamos reproduciendo.
     * @param player objeto Player.
     * @return BufferedImage obtenida de la cámara.
     */
    public BufferedImage getFrame(Player player){ 
        FrameGrabbingControl fgc;
        String claseCtr = "javax.media.control.FrameGrabbingControl";
        fgc = (FrameGrabbingControl)player.getControl(claseCtr);
        Buffer bufferFrame = fgc.grabFrame();
        BufferToImage bti;
        bti=new BufferToImage((VideoFormat)bufferFrame.getFormat());
        Image img = bti.createImage(bufferFrame);
        return (BufferedImage)img;
    }
    
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        setClosable(true);
        setIconifiable(true);
        setMaximizable(true);
        setResizable(true);

        pack();
    }// </editor-fold>//GEN-END:initComponents


    // Variables declaration - do not modify//GEN-BEGIN:variables
    // End of variables declaration//GEN-END:variables
}

/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

package evaluacionFinal;


import java.awt.Color;
import java.awt.Graphics;
import java.awt.Graphics2D;
import java.awt.Point;
import java.awt.color.ColorSpace;
import java.awt.color.ICC_ColorSpace;
import java.awt.color.ICC_Profile;
import java.awt.geom.AffineTransform;
import java.awt.image.AffineTransformOp;
import java.awt.image.BandCombineOp;
import java.awt.image.BufferedImage;
import static java.awt.image.BufferedImage.TYPE_INT_RGB;
import java.awt.image.ColorConvertOp;
import java.awt.image.ConvolveOp;
import java.awt.image.Kernel;
import java.awt.image.LookupOp;
import java.awt.image.LookupTable;
import java.awt.image.RescaleOp;
import java.awt.image.WritableRaster;
import java.io.File;
import java.io.IOException;
import javax.imageio.ImageIO;
import javax.swing.JColorChooser;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import sm.image.ThresholdOp;

/**
 * Ventana principal, donde estará todo.
 * @author Alvaro Maximino Linares Herrera
 */
public class VentanaPrincipal extends javax.swing.JFrame {

    private Color color = Color.BLACK;
    private Color colorRelleno = Color.BLACK;
    private boolean relleno = false;
    private boolean degradadoH = false;
    private boolean degradadoV = false;
    private BufferedImage imgSrc = null;
    private Graphics2D g = null;
    //Variables para controlar las barras
    private boolean barraDib = true;
    private boolean barraOpe = true;
    private boolean estado = true;
    private boolean umbralColor = false;
    private boolean editar = false;
    private boolean discontinuo = false;
    /*
     * Constructor
     */
    public VentanaPrincipal() {
        initComponents();
        this.setTitle("Evaluación Final");
    }
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        grupoColores = new javax.swing.ButtonGroup();
        barraScroll = new javax.swing.JScrollPane();
        areaTexto = new javax.swing.JTextArea();
        grupoDibujo = new javax.swing.ButtonGroup();
        grupoRelleno = new javax.swing.ButtonGroup();
        panelNorte = new javax.swing.JPanel();
        panelGeneral = new javax.swing.JPanel();
        abrirMedioBoton = new javax.swing.JButton();
        camaraBoton = new javax.swing.JButton();
        capturarBoton = new javax.swing.JButton();
        nuevoBoton = new javax.swing.JButton();
        guardarBoton = new javax.swing.JButton();
        panelDibujo = new javax.swing.JPanel();
        panelTabuladoDibujo = new javax.swing.JTabbedPane();
        panelFormas = new javax.swing.JPanel();
        panelTipoFormas = new javax.swing.JPanel();
        botonPunto = new javax.swing.JToggleButton();
        botonLinea = new javax.swing.JToggleButton();
        botonRectangulo = new javax.swing.JToggleButton();
        botonElipse = new javax.swing.JToggleButton();
        botonCurva = new javax.swing.JToggleButton();
        panelAtributos = new javax.swing.JPanel();
        panelColor = new javax.swing.JPanel();
        botonNegro = new javax.swing.JButton();
        botonRojo = new javax.swing.JButton();
        botonAzul = new javax.swing.JButton();
        botonBlanco = new javax.swing.JButton();
        botonVerde = new javax.swing.JButton();
        botonAmarillo = new javax.swing.JButton();
        cambiarColorBoton = new javax.swing.JButton();
        colorRellenoBoton = new javax.swing.JButton();
        panelEdicion = new javax.swing.JPanel();
        checkEditar = new javax.swing.JCheckBox();
        sinRellenoBoton = new javax.swing.JToggleButton();
        degradadoHBoton = new javax.swing.JToggleButton();
        rellenoLisoBoton = new javax.swing.JToggleButton();
        degradadoVBoton = new javax.swing.JToggleButton();
        panelGrosor = new javax.swing.JPanel();
        spinnerGrosor = new javax.swing.JSpinner();
        discontCheck = new javax.swing.JCheckBox();
        panelSur = new javax.swing.JPanel();
        panelEstado = new javax.swing.JPanel();
        labelEstado = new javax.swing.JLabel();
        panelTabuladoOperaciones = new javax.swing.JTabbedPane();
        panelOperaciones = new javax.swing.JPanel();
        panelBrillo = new javax.swing.JPanel();
        brilloSlider = new javax.swing.JSlider();
        panelMascara = new javax.swing.JPanel();
        selectorMascara = new javax.swing.JComboBox();
        panelContraste = new javax.swing.JPanel();
        botonContraste = new javax.swing.JButton();
        botonIluminar = new javax.swing.JButton();
        botonOscurecer = new javax.swing.JButton();
        panelRotacion = new javax.swing.JPanel();
        sliderRotacion = new javax.swing.JSlider();
        boton90 = new javax.swing.JButton();
        boton180 = new javax.swing.JButton();
        boton270 = new javax.swing.JButton();
        panelOperaciones2 = new javax.swing.JPanel();
        panelBotones = new javax.swing.JPanel();
        duplicarBoton = new javax.swing.JButton();
        popArtBoton = new javax.swing.JButton();
        negativoBoton = new javax.swing.JButton();
        grisesBoton = new javax.swing.JButton();
        dosterciosBoton = new javax.swing.JButton();
        panelUmbralizacion = new javax.swing.JPanel();
        sliderUmbral = new javax.swing.JSlider();
        umbralizarColorCheckBox = new javax.swing.JCheckBox();
        panelEscalado = new javax.swing.JPanel();
        botonAumentar = new javax.swing.JButton();
        botonDisminuir = new javax.swing.JButton();
        escritorio = new javax.swing.JDesktopPane();
        barraMenu = new javax.swing.JMenuBar();
        menuArchivo = new javax.swing.JMenu();
        nuevoMenu = new javax.swing.JMenuItem();
        menuAbrir = new javax.swing.JMenu();
        abrirImagenMenu = new javax.swing.JMenuItem();
        abrirMusicaMenu = new javax.swing.JMenuItem();
        abrirGrabadorMenu = new javax.swing.JMenuItem();
        abrirVideoMenu = new javax.swing.JMenuItem();
        guardarMenu = new javax.swing.JMenuItem();
        camaraMenu = new javax.swing.JMenuItem();
        menuEdicion = new javax.swing.JMenu();
        mostrarBarraEstadoCheckBox = new javax.swing.JCheckBoxMenuItem();
        mostrarBarraDibujo = new javax.swing.JCheckBoxMenuItem();
        mostrarBarraOperaciones = new javax.swing.JCheckBoxMenuItem();
        menuImagen = new javax.swing.JMenu();
        bandCombineOpItem = new javax.swing.JMenuItem();
        colorConvertOpItem = new javax.swing.JMenuItem();
        restaOpItem = new javax.swing.JMenuItem();
        multiplicacionOpItem = new javax.swing.JMenuItem();
        dosterciosUmbralizacionOpItem = new javax.swing.JMenuItem();
        marilynOpItem = new javax.swing.JMenuItem();
        ayudaMenu = new javax.swing.JMenu();
        acercadeItem = new javax.swing.JMenuItem();

        areaTexto.setColumns(20);
        areaTexto.setRows(5);
        barraScroll.setViewportView(areaTexto);

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        panelNorte.setMinimumSize(new java.awt.Dimension(100, 30));
        panelNorte.setPreferredSize(new java.awt.Dimension(400, 140));

        panelGeneral.setBorder(javax.swing.BorderFactory.createTitledBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED), "General"));

        abrirMedioBoton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/iconosPractica11/iconos/AbrirMedio.png"))); // NOI18N
        abrirMedioBoton.setToolTipText("Abrir un archivo");
        abrirMedioBoton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                abrirMedioBotonActionPerformed(evt);
            }
        });

        camaraBoton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/iconosPractica11/iconos/Camara.png"))); // NOI18N
        camaraBoton.setToolTipText("Abrir la cámara");
        camaraBoton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                camaraBotonActionPerformed(evt);
            }
        });

        capturarBoton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/iconosPractica11/iconos/Capturar.png"))); // NOI18N
        capturarBoton.setToolTipText("Hacer una captura de la cámara o de video");
        capturarBoton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                capturarBotonActionPerformed(evt);
            }
        });

        nuevoBoton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/iconosPractica11/iconos/NuevoBoceto.GIF"))); // NOI18N
        nuevoBoton.setToolTipText("Crea un nuevo lienzo");
        nuevoBoton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                nuevoBotonActionPerformed(evt);
            }
        });

        guardarBoton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/iconosPractica11/iconos/Guardar.gif"))); // NOI18N
        guardarBoton.setToolTipText("Guardar una imágen");
        guardarBoton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                guardarBotonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout panelGeneralLayout = new javax.swing.GroupLayout(panelGeneral);
        panelGeneral.setLayout(panelGeneralLayout);
        panelGeneralLayout.setHorizontalGroup(
            panelGeneralLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelGeneralLayout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(nuevoBoton, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(abrirMedioBoton, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(guardarBoton, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(camaraBoton, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(capturarBoton, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(50, 50, 50))
        );
        panelGeneralLayout.setVerticalGroup(
            panelGeneralLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelGeneralLayout.createSequentialGroup()
                .addGroup(panelGeneralLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(abrirMedioBoton, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                    .addComponent(nuevoBoton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(panelGeneralLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                        .addComponent(camaraBoton, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(guardarBoton))
                    .addComponent(capturarBoton, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        panelDibujo.setBorder(javax.swing.BorderFactory.createEmptyBorder(1, 1, 1, 1));

        panelTabuladoDibujo.setPreferredSize(new java.awt.Dimension(700, 104));

        panelTipoFormas.setBorder(javax.swing.BorderFactory.createTitledBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED), "Formas"));

        grupoDibujo.add(botonPunto);
        botonPunto.setIcon(new javax.swing.ImageIcon(getClass().getResource("/iconosPractica11/iconos/Lapiz.gif"))); // NOI18N
        botonPunto.setSelected(true);
        botonPunto.setToolTipText("Dibujar puntos");
        botonPunto.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                botonPuntoActionPerformed(evt);
            }
        });

        grupoDibujo.add(botonLinea);
        botonLinea.setIcon(new javax.swing.ImageIcon(getClass().getResource("/iconosPractica11/iconos/Linea.gif"))); // NOI18N
        botonLinea.setToolTipText("Dibujar lineas");
        botonLinea.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                botonLineaActionPerformed(evt);
            }
        });

        grupoDibujo.add(botonRectangulo);
        botonRectangulo.setIcon(new javax.swing.ImageIcon(getClass().getResource("/iconosPractica11/iconos/Rectangulo.gif"))); // NOI18N
        botonRectangulo.setToolTipText("Dibujar rectángulos");
        botonRectangulo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                botonRectanguloActionPerformed(evt);
            }
        });

        grupoDibujo.add(botonElipse);
        botonElipse.setIcon(new javax.swing.ImageIcon(getClass().getResource("/iconosPractica11/iconos/Ovalo.gif"))); // NOI18N
        botonElipse.setToolTipText("Dibujar elipses");
        botonElipse.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                botonElipseActionPerformed(evt);
            }
        });

        grupoDibujo.add(botonCurva);
        botonCurva.setIcon(new javax.swing.ImageIcon(getClass().getResource("/iconosPractica11/iconos/curva.gif"))); // NOI18N
        botonCurva.setToolTipText("Dibujar curvas");
        botonCurva.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                botonCurvaActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout panelTipoFormasLayout = new javax.swing.GroupLayout(panelTipoFormas);
        panelTipoFormas.setLayout(panelTipoFormasLayout);
        panelTipoFormasLayout.setHorizontalGroup(
            panelTipoFormasLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelTipoFormasLayout.createSequentialGroup()
                .addComponent(botonPunto, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(botonLinea, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(botonRectangulo, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(botonElipse, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(botonCurva, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(19, Short.MAX_VALUE))
        );
        panelTipoFormasLayout.setVerticalGroup(
            panelTipoFormasLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelTipoFormasLayout.createSequentialGroup()
                .addGroup(panelTipoFormasLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(botonPunto, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(botonLinea, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(botonRectangulo, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(botonElipse, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(botonCurva, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE))
                .addContainerGap(18, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout panelFormasLayout = new javax.swing.GroupLayout(panelFormas);
        panelFormas.setLayout(panelFormasLayout);
        panelFormasLayout.setHorizontalGroup(
            panelFormasLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelFormasLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(panelTipoFormas, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(675, Short.MAX_VALUE))
        );
        panelFormasLayout.setVerticalGroup(
            panelFormasLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelFormasLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(panelTipoFormas, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(30, Short.MAX_VALUE))
        );

        panelTabuladoDibujo.addTab("Formas", panelFormas);

        panelColor.setBorder(javax.swing.BorderFactory.createTitledBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED), "Color"));

        botonNegro.setBackground(new java.awt.Color(0, 0, 0));
        botonNegro.setToolTipText("Color principal negro");
        grupoColores.add(botonNegro);
        botonNegro.setPreferredSize(new java.awt.Dimension(20, 20));
        botonNegro.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                botonNegroActionPerformed(evt);
            }
        });

        botonRojo.setBackground(new java.awt.Color(255, 0, 0));
        botonRojo.setToolTipText("Color principal rojo");
        grupoColores.add(botonRojo);
        botonRojo.setMaximumSize(new java.awt.Dimension(20, 20));
        botonRojo.setMinimumSize(new java.awt.Dimension(20, 20));
        botonRojo.setPreferredSize(new java.awt.Dimension(20, 20));
        botonRojo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                botonRojoActionPerformed(evt);
            }
        });

        botonAzul.setBackground(new java.awt.Color(0, 0, 255));
        botonAzul.setToolTipText("Color principal azul");
        grupoColores.add(botonAzul);
        botonAzul.setName(""); // NOI18N
        botonAzul.setPreferredSize(new java.awt.Dimension(20, 20));
        botonAzul.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                botonAzulActionPerformed(evt);
            }
        });

        botonBlanco.setBackground(new java.awt.Color(255, 255, 255));
        botonBlanco.setToolTipText("Color principal blanco");
        grupoColores.add(botonBlanco);
        botonBlanco.setMinimumSize(new java.awt.Dimension(33, 12));
        botonBlanco.setPreferredSize(new java.awt.Dimension(20, 20));
        botonBlanco.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                botonBlancoActionPerformed(evt);
            }
        });

        botonVerde.setBackground(new java.awt.Color(0, 255, 0));
        botonVerde.setToolTipText("Color principal verde");
        grupoColores.add(botonVerde);
        botonVerde.setPreferredSize(new java.awt.Dimension(20, 20));
        botonVerde.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                botonVerdeActionPerformed(evt);
            }
        });

        botonAmarillo.setBackground(new java.awt.Color(255, 255, 0));
        botonAmarillo.setToolTipText("Color principal amarillo");
        grupoColores.add(botonAmarillo);
        botonAmarillo.setPreferredSize(new java.awt.Dimension(20, 20));
        botonAmarillo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                botonAmarilloActionPerformed(evt);
            }
        });

        cambiarColorBoton.setBackground(color);
        cambiarColorBoton.setText("Dibujo");
        cambiarColorBoton.setToolTipText("Paleta para color principal");
        grupoColores.add(cambiarColorBoton);
        cambiarColorBoton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cambiarColorBotonActionPerformed(evt);
            }
        });

        colorRellenoBoton.setBackground(colorRelleno);
        colorRellenoBoton.setText("Relleno");
        colorRellenoBoton.setToolTipText("Paleta para color de relleno");
        grupoColores.add(colorRellenoBoton);
        colorRellenoBoton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                colorRellenoBotonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout panelColorLayout = new javax.swing.GroupLayout(panelColor);
        panelColor.setLayout(panelColorLayout);
        panelColorLayout.setHorizontalGroup(
            panelColorLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelColorLayout.createSequentialGroup()
                .addComponent(botonNegro, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(botonRojo, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(botonAzul, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(botonBlanco, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(botonVerde, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(botonAmarillo, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(cambiarColorBoton)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(colorRellenoBoton))
        );
        panelColorLayout.setVerticalGroup(
            panelColorLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelColorLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                .addComponent(cambiarColorBoton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(colorRellenoBoton))
            .addGroup(panelColorLayout.createSequentialGroup()
                .addGroup(panelColorLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addComponent(botonAmarillo, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(botonVerde, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(botonBlanco, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(botonAzul, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(botonRojo, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(botonNegro, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(0, 0, Short.MAX_VALUE))
        );

        panelEdicion.setBorder(javax.swing.BorderFactory.createTitledBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED), "Edicion"));

        checkEditar.setToolTipText("Activa la edición de una figura");
        checkEditar.setLabel("Editar");
        checkEditar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                checkEditarActionPerformed(evt);
            }
        });

        grupoRelleno.add(sinRellenoBoton);
        sinRellenoBoton.setSelected(true);
        sinRellenoBoton.setText("Sin relleno");
        sinRellenoBoton.setToolTipText("No rellena la figura");
        sinRellenoBoton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                sinRellenoBotonActionPerformed(evt);
            }
        });

        grupoRelleno.add(degradadoHBoton);
        degradadoHBoton.setText("Degradado H");
        degradadoHBoton.setToolTipText("Rellena la figura con un degradado horizontal");
        degradadoHBoton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                degradadoHBotonActionPerformed(evt);
            }
        });

        grupoRelleno.add(rellenoLisoBoton);
        rellenoLisoBoton.setText("Relleno liso");
        rellenoLisoBoton.setToolTipText("Rellena la figura con el color secundario");
        rellenoLisoBoton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rellenoLisoBotonActionPerformed(evt);
            }
        });

        grupoRelleno.add(degradadoVBoton);
        degradadoVBoton.setText("Degradado V");
        degradadoVBoton.setToolTipText("Rellena la figura con un degradado vertical");
        degradadoVBoton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                degradadoVBotonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout panelEdicionLayout = new javax.swing.GroupLayout(panelEdicion);
        panelEdicion.setLayout(panelEdicionLayout);
        panelEdicionLayout.setHorizontalGroup(
            panelEdicionLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelEdicionLayout.createSequentialGroup()
                .addComponent(checkEditar)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(panelEdicionLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(sinRellenoBoton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(panelEdicionLayout.createSequentialGroup()
                        .addComponent(rellenoLisoBoton)
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(panelEdicionLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(degradadoHBoton)
                    .addComponent(degradadoVBoton))
                .addGap(14, 14, 14))
        );
        panelEdicionLayout.setVerticalGroup(
            panelEdicionLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelEdicionLayout.createSequentialGroup()
                .addGroup(panelEdicionLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(checkEditar)
                    .addComponent(sinRellenoBoton)
                    .addComponent(degradadoHBoton))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(panelEdicionLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(degradadoVBoton)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, panelEdicionLayout.createSequentialGroup()
                        .addComponent(rellenoLisoBoton)
                        .addContainerGap())))
        );

        panelGrosor.setBorder(javax.swing.BorderFactory.createTitledBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED), "Edición de trazado"));

        spinnerGrosor.setModel(new javax.swing.SpinnerNumberModel(Float.valueOf(1.0f), Float.valueOf(1.0f), Float.valueOf(10.0f), Float.valueOf(1.0f)));
        spinnerGrosor.setToolTipText("Aumenta o disminuye el grosor del trazo");
        spinnerGrosor.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                spinnerGrosorStateChanged(evt);
            }
        });

        discontCheck.setText("Discontinuo");
        discontCheck.setToolTipText("Trazo discontinuo");
        discontCheck.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                discontCheckActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout panelGrosorLayout = new javax.swing.GroupLayout(panelGrosor);
        panelGrosor.setLayout(panelGrosorLayout);
        panelGrosorLayout.setHorizontalGroup(
            panelGrosorLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, panelGrosorLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(spinnerGrosor, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(discontCheck)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        panelGrosorLayout.setVerticalGroup(
            panelGrosorLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelGrosorLayout.createSequentialGroup()
                .addGroup(panelGrosorLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(discontCheck)
                    .addComponent(spinnerGrosor, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout panelAtributosLayout = new javax.swing.GroupLayout(panelAtributos);
        panelAtributos.setLayout(panelAtributosLayout);
        panelAtributosLayout.setHorizontalGroup(
            panelAtributosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelAtributosLayout.createSequentialGroup()
                .addComponent(panelColor, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(2, 2, 2)
                .addComponent(panelEdicion, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(panelGrosor, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(60, Short.MAX_VALUE))
        );
        panelAtributosLayout.setVerticalGroup(
            panelAtributosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelAtributosLayout.createSequentialGroup()
                .addGroup(panelAtributosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(panelAtributosLayout.createSequentialGroup()
                        .addGroup(panelAtributosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(panelGrosor, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(panelColor, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(0, 47, Short.MAX_VALUE))
                    .addComponent(panelEdicion, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(0, 0, 0))
        );

        panelTabuladoDibujo.addTab("Atributos", panelAtributos);

        javax.swing.GroupLayout panelDibujoLayout = new javax.swing.GroupLayout(panelDibujo);
        panelDibujo.setLayout(panelDibujoLayout);
        panelDibujoLayout.setHorizontalGroup(
            panelDibujoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelDibujoLayout.createSequentialGroup()
                .addComponent(panelTabuladoDibujo, javax.swing.GroupLayout.PREFERRED_SIZE, 887, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
        );
        panelDibujoLayout.setVerticalGroup(
            panelDibujoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelDibujoLayout.createSequentialGroup()
                .addComponent(panelTabuladoDibujo, javax.swing.GroupLayout.PREFERRED_SIZE, 130, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout panelNorteLayout = new javax.swing.GroupLayout(panelNorte);
        panelNorte.setLayout(panelNorteLayout);
        panelNorteLayout.setHorizontalGroup(
            panelNorteLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelNorteLayout.createSequentialGroup()
                .addComponent(panelGeneral, javax.swing.GroupLayout.PREFERRED_SIZE, 207, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(panelDibujo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 44, Short.MAX_VALUE))
        );
        panelNorteLayout.setVerticalGroup(
            panelNorteLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelNorteLayout.createSequentialGroup()
                .addGroup(panelNorteLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(panelNorteLayout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(panelGeneral, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(panelDibujo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(44, 44, 44))
        );

        getContentPane().add(panelNorte, java.awt.BorderLayout.PAGE_START);

        panelSur.setPreferredSize(new java.awt.Dimension(434, 160));

        panelEstado.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));

        labelEstado.setText("Estado");

        javax.swing.GroupLayout panelEstadoLayout = new javax.swing.GroupLayout(panelEstado);
        panelEstado.setLayout(panelEstadoLayout);
        panelEstadoLayout.setHorizontalGroup(
            panelEstadoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelEstadoLayout.createSequentialGroup()
                .addComponent(labelEstado)
                .addContainerGap(1101, Short.MAX_VALUE))
        );
        panelEstadoLayout.setVerticalGroup(
            panelEstadoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(labelEstado)
        );

        panelOperaciones.setBorder(javax.swing.BorderFactory.createTitledBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED), "Operaciones sobre imágenes"));
        panelOperaciones.setPreferredSize(new java.awt.Dimension(1449, 120));

        panelBrillo.setBorder(javax.swing.BorderFactory.createTitledBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED), "Brillo"));

        brilloSlider.setMaximum(256);
        brilloSlider.setMinimum(-300);
        brilloSlider.setToolTipText("Deslizar para cambiar el brillo de la imágen");
        brilloSlider.setValue(0);
        brilloSlider.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                brilloSliderStateChanged(evt);
            }
        });
        brilloSlider.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                brilloSliderFocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                brilloSliderFocusLost(evt);
            }
        });

        javax.swing.GroupLayout panelBrilloLayout = new javax.swing.GroupLayout(panelBrillo);
        panelBrillo.setLayout(panelBrilloLayout);
        panelBrilloLayout.setHorizontalGroup(
            panelBrilloLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, panelBrilloLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(brilloSlider, javax.swing.GroupLayout.DEFAULT_SIZE, 182, Short.MAX_VALUE)
                .addContainerGap())
        );
        panelBrilloLayout.setVerticalGroup(
            panelBrilloLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, panelBrilloLayout.createSequentialGroup()
                .addGap(0, 13, Short.MAX_VALUE)
                .addComponent(brilloSlider, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
        );

        panelMascara.setBorder(javax.swing.BorderFactory.createTitledBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED), "Máscara"));

        selectorMascara.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Media", "Binomial", "Enfoque", "Relieve", "Laplaciana" }));
        selectorMascara.setToolTipText("Aplicar diferentes máscaras a la imágen");
        selectorMascara.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));
        selectorMascara.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                selectorMascaraActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout panelMascaraLayout = new javax.swing.GroupLayout(panelMascara);
        panelMascara.setLayout(panelMascaraLayout);
        panelMascaraLayout.setHorizontalGroup(
            panelMascaraLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelMascaraLayout.createSequentialGroup()
                .addComponent(selectorMascara, javax.swing.GroupLayout.PREFERRED_SIZE, 76, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 24, Short.MAX_VALUE))
        );
        panelMascaraLayout.setVerticalGroup(
            panelMascaraLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, panelMascaraLayout.createSequentialGroup()
                .addGap(0, 15, Short.MAX_VALUE)
                .addComponent(selectorMascara, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
        );

        panelContraste.setBorder(javax.swing.BorderFactory.createTitledBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED), "Contraste"));

        botonContraste.setIcon(new javax.swing.ImageIcon(getClass().getResource("/iconosPractica11/iconos/contraste.png"))); // NOI18N
        botonContraste.setToolTipText("Aplicar contraste");
        botonContraste.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                botonContrasteActionPerformed(evt);
            }
        });

        botonIluminar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/iconosPractica11/iconos/iluminar.png"))); // NOI18N
        botonIluminar.setToolTipText("Aplicar iluminación");
        botonIluminar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                botonIluminarActionPerformed(evt);
            }
        });

        botonOscurecer.setIcon(new javax.swing.ImageIcon(getClass().getResource("/iconosPractica11/iconos/oscurecer.png"))); // NOI18N
        botonOscurecer.setToolTipText("Aplicar oscurecimiento");
        botonOscurecer.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                botonOscurecerActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout panelContrasteLayout = new javax.swing.GroupLayout(panelContraste);
        panelContraste.setLayout(panelContrasteLayout);
        panelContrasteLayout.setHorizontalGroup(
            panelContrasteLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelContrasteLayout.createSequentialGroup()
                .addComponent(botonContraste, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(botonIluminar, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(botonOscurecer, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE))
        );
        panelContrasteLayout.setVerticalGroup(
            panelContrasteLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, panelContrasteLayout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(panelContrasteLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(botonOscurecer)
                    .addComponent(botonIluminar)
                    .addComponent(botonContraste))
                .addContainerGap())
        );

        panelRotacion.setBorder(javax.swing.BorderFactory.createTitledBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED), "Rotacion"));

        sliderRotacion.setMaximum(360);
        sliderRotacion.setToolTipText("Deslizar para rotar la imágen");
        sliderRotacion.setValue(0);
        sliderRotacion.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                sliderRotacionStateChanged(evt);
            }
        });
        sliderRotacion.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                sliderRotacionFocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                sliderRotacionFocusLost(evt);
            }
        });

        boton90.setIcon(new javax.swing.ImageIcon(getClass().getResource("/iconosPractica11/iconos/rotacion90.png"))); // NOI18N
        boton90.setToolTipText("Rotar 90º");
        boton90.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                boton90ActionPerformed(evt);
            }
        });

        boton180.setIcon(new javax.swing.ImageIcon(getClass().getResource("/iconosPractica11/iconos/rotacion180.png"))); // NOI18N
        boton180.setToolTipText("Rotar 180º");
        boton180.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                boton180ActionPerformed(evt);
            }
        });

        boton270.setIcon(new javax.swing.ImageIcon(getClass().getResource("/iconosPractica11/iconos/rotacion270.png"))); // NOI18N
        boton270.setToolTipText("Rotar 270º");
        boton270.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                boton270ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout panelRotacionLayout = new javax.swing.GroupLayout(panelRotacion);
        panelRotacion.setLayout(panelRotacionLayout);
        panelRotacionLayout.setHorizontalGroup(
            panelRotacionLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelRotacionLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(sliderRotacion, javax.swing.GroupLayout.PREFERRED_SIZE, 141, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(boton90, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(boton180, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(boton270, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        panelRotacionLayout.setVerticalGroup(
            panelRotacionLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelRotacionLayout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(panelRotacionLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(boton90)
                    .addComponent(sliderRotacion, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(panelRotacionLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                        .addComponent(boton270)
                        .addComponent(boton180))))
        );

        javax.swing.GroupLayout panelOperacionesLayout = new javax.swing.GroupLayout(panelOperaciones);
        panelOperaciones.setLayout(panelOperacionesLayout);
        panelOperacionesLayout.setHorizontalGroup(
            panelOperacionesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelOperacionesLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(panelBrillo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(2, 2, 2)
                .addComponent(panelMascara, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(panelContraste, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(panelRotacion, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(31, Short.MAX_VALUE))
        );
        panelOperacionesLayout.setVerticalGroup(
            panelOperacionesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, panelOperacionesLayout.createSequentialGroup()
                .addGap(6, 6, 6)
                .addGroup(panelOperacionesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(panelBrillo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(panelMascara, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(panelContraste, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(panelRotacion, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(12, 12, 12))
        );

        panelTabuladoOperaciones.addTab("Operaciones, pág. 1", panelOperaciones);

        panelBotones.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));
        panelBotones.setToolTipText("");

        duplicarBoton.setText("Duplicar");
        duplicarBoton.setToolTipText("Duplica la imagen");
        duplicarBoton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                duplicarBotonActionPerformed(evt);
            }
        });

        popArtBoton.setText("Pop Art");
        popArtBoton.setToolTipText("Cambia la imagen al estilo pop art");
        popArtBoton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                popArtBotonActionPerformed(evt);
            }
        });

        negativoBoton.setText("Negativo");
        negativoBoton.setToolTipText("Aplica el negativo a una imagen");
        negativoBoton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                negativoBotonActionPerformed(evt);
            }
        });

        grisesBoton.setText("Grises");
        grisesBoton.setToolTipText("Aplica el escalado a nivel de grises a una imagen.");
        grisesBoton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                grisesBotonActionPerformed(evt);
            }
        });

        dosterciosBoton.setText("2/3 Umbral");
        dosterciosBoton.setToolTipText("Aplica la umbralización a 2/3 de la imagen");
        dosterciosBoton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                dosterciosBotonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout panelBotonesLayout = new javax.swing.GroupLayout(panelBotones);
        panelBotones.setLayout(panelBotonesLayout);
        panelBotonesLayout.setHorizontalGroup(
            panelBotonesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelBotonesLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(panelBotonesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(negativoBoton, javax.swing.GroupLayout.DEFAULT_SIZE, 85, Short.MAX_VALUE)
                    .addComponent(duplicarBoton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(panelBotonesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(panelBotonesLayout.createSequentialGroup()
                        .addComponent(popArtBoton, javax.swing.GroupLayout.PREFERRED_SIZE, 85, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(dosterciosBoton))
                    .addComponent(grisesBoton, javax.swing.GroupLayout.PREFERRED_SIZE, 85, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(28, Short.MAX_VALUE))
        );
        panelBotonesLayout.setVerticalGroup(
            panelBotonesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelBotonesLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(panelBotonesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(duplicarBoton)
                    .addComponent(popArtBoton)
                    .addComponent(dosterciosBoton))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(panelBotonesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(negativoBoton)
                    .addComponent(grisesBoton))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        panelUmbralizacion.setBorder(javax.swing.BorderFactory.createTitledBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED), "Umbralización"));

        sliderUmbral.setMaximum(255);
        sliderUmbral.setToolTipText("Deslizar para cambiar el umbral");
        sliderUmbral.setValue(0);
        sliderUmbral.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                sliderUmbralStateChanged(evt);
            }
        });
        sliderUmbral.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                sliderUmbralFocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                sliderUmbralFocusLost(evt);
            }
        });

        umbralizarColorCheckBox.setText("Umbralizar sobre color");
        umbralizarColorCheckBox.setToolTipText("Umbralizar sobre el color principal seleccionado");
        umbralizarColorCheckBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                umbralizarColorCheckBoxActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout panelUmbralizacionLayout = new javax.swing.GroupLayout(panelUmbralizacion);
        panelUmbralizacion.setLayout(panelUmbralizacionLayout);
        panelUmbralizacionLayout.setHorizontalGroup(
            panelUmbralizacionLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelUmbralizacionLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(panelUmbralizacionLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(umbralizarColorCheckBox)
                    .addComponent(sliderUmbral, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        panelUmbralizacionLayout.setVerticalGroup(
            panelUmbralizacionLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelUmbralizacionLayout.createSequentialGroup()
                .addComponent(sliderUmbral, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(umbralizarColorCheckBox))
        );

        panelEscalado.setBorder(javax.swing.BorderFactory.createTitledBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED), "Escalado"));

        botonAumentar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/iconosPractica11/iconos/aumentar.png"))); // NOI18N
        botonAumentar.setToolTipText("Aumentar la imágen");
        botonAumentar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                botonAumentarActionPerformed(evt);
            }
        });

        botonDisminuir.setIcon(new javax.swing.ImageIcon(getClass().getResource("/iconosPractica11/iconos/disminuir.png"))); // NOI18N
        botonDisminuir.setToolTipText("DIsminuir la imágen");
        botonDisminuir.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                botonDisminuirActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout panelEscaladoLayout = new javax.swing.GroupLayout(panelEscalado);
        panelEscalado.setLayout(panelEscaladoLayout);
        panelEscaladoLayout.setHorizontalGroup(
            panelEscaladoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelEscaladoLayout.createSequentialGroup()
                .addComponent(botonAumentar, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(botonDisminuir, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 10, Short.MAX_VALUE))
        );
        panelEscaladoLayout.setVerticalGroup(
            panelEscaladoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, panelEscaladoLayout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(panelEscaladoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(botonDisminuir)
                    .addComponent(botonAumentar))
                .addContainerGap())
        );

        javax.swing.GroupLayout panelOperaciones2Layout = new javax.swing.GroupLayout(panelOperaciones2);
        panelOperaciones2.setLayout(panelOperaciones2Layout);
        panelOperaciones2Layout.setHorizontalGroup(
            panelOperaciones2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, panelOperaciones2Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(panelEscalado, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(panelUmbralizacion, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(panelBotones, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(137, Short.MAX_VALUE))
        );
        panelOperaciones2Layout.setVerticalGroup(
            panelOperaciones2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelOperaciones2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(panelOperaciones2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(panelBotones, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(panelOperaciones2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addComponent(panelEscalado, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(panelUmbralizacion, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        panelTabuladoOperaciones.addTab("Operaciones, pág. 2", panelOperaciones2);

        javax.swing.GroupLayout panelSurLayout = new javax.swing.GroupLayout(panelSur);
        panelSur.setLayout(panelSurLayout);
        panelSurLayout.setHorizontalGroup(
            panelSurLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelSurLayout.createSequentialGroup()
                .addComponent(panelEstado, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
            .addGroup(panelSurLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(panelTabuladoOperaciones, javax.swing.GroupLayout.PREFERRED_SIZE, 795, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        panelSurLayout.setVerticalGroup(
            panelSurLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelSurLayout.createSequentialGroup()
                .addComponent(panelTabuladoOperaciones, javax.swing.GroupLayout.PREFERRED_SIZE, 128, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 12, Short.MAX_VALUE)
                .addComponent(panelEstado, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
        );

        getContentPane().add(panelSur, java.awt.BorderLayout.PAGE_END);

        javax.swing.GroupLayout escritorioLayout = new javax.swing.GroupLayout(escritorio);
        escritorio.setLayout(escritorioLayout);
        escritorioLayout.setHorizontalGroup(
            escritorioLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 1150, Short.MAX_VALUE)
        );
        escritorioLayout.setVerticalGroup(
            escritorioLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 310, Short.MAX_VALUE)
        );

        getContentPane().add(escritorio, java.awt.BorderLayout.CENTER);

        menuArchivo.setText("Archivo");

        nuevoMenu.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_N, java.awt.event.InputEvent.CTRL_MASK));
        nuevoMenu.setIcon(new javax.swing.ImageIcon(getClass().getResource("/iconosPractica11/iconos/NuevoBoceto.GIF"))); // NOI18N
        nuevoMenu.setText("Nuevo");
        nuevoMenu.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                nuevoMenuActionPerformed(evt);
            }
        });
        menuArchivo.add(nuevoMenu);

        menuAbrir.setIcon(new javax.swing.ImageIcon(getClass().getResource("/iconosPractica11/iconos/AbrirMedio.png"))); // NOI18N
        menuAbrir.setText("Abrir..");

        abrirImagenMenu.setText("Abrir imagen");
        abrirImagenMenu.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                abrirImagenMenuActionPerformed(evt);
            }
        });
        menuAbrir.add(abrirImagenMenu);

        abrirMusicaMenu.setText("Abrir música");
        abrirMusicaMenu.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                abrirMusicaMenuActionPerformed(evt);
            }
        });
        menuAbrir.add(abrirMusicaMenu);

        abrirGrabadorMenu.setText("Abrir grabador");
        abrirGrabadorMenu.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                abrirGrabadorMenuActionPerformed(evt);
            }
        });
        menuAbrir.add(abrirGrabadorMenu);

        abrirVideoMenu.setText("Abrir video");
        abrirVideoMenu.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                abrirVideoMenuActionPerformed(evt);
            }
        });
        menuAbrir.add(abrirVideoMenu);

        menuArchivo.add(menuAbrir);

        guardarMenu.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_S, java.awt.event.InputEvent.CTRL_MASK));
        guardarMenu.setIcon(new javax.swing.ImageIcon(getClass().getResource("/iconosPractica11/iconos/Guardar.gif"))); // NOI18N
        guardarMenu.setText("Guardar");
        guardarMenu.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                guardarMenuActionPerformed(evt);
            }
        });
        menuArchivo.add(guardarMenu);

        camaraMenu.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_C, java.awt.event.InputEvent.CTRL_MASK));
        camaraMenu.setIcon(new javax.swing.ImageIcon(getClass().getResource("/iconosPractica11/iconos/Camara.png"))); // NOI18N
        camaraMenu.setText("Abrir cámara");
        camaraMenu.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                camaraMenuActionPerformed(evt);
            }
        });
        menuArchivo.add(camaraMenu);

        barraMenu.add(menuArchivo);

        menuEdicion.setText("Edición");

        mostrarBarraEstadoCheckBox.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_E, java.awt.event.InputEvent.CTRL_MASK));
        mostrarBarraEstadoCheckBox.setSelected(true);
        mostrarBarraEstadoCheckBox.setText("Mostrar barra de estado");
        mostrarBarraEstadoCheckBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mostrarBarraEstadoCheckBoxActionPerformed(evt);
            }
        });
        menuEdicion.add(mostrarBarraEstadoCheckBox);

        mostrarBarraDibujo.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_B, java.awt.event.InputEvent.CTRL_MASK));
        mostrarBarraDibujo.setSelected(true);
        mostrarBarraDibujo.setText("Mostrar barra de dibujo");
        mostrarBarraDibujo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mostrarBarraDibujoActionPerformed(evt);
            }
        });
        menuEdicion.add(mostrarBarraDibujo);

        mostrarBarraOperaciones.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_I, java.awt.event.InputEvent.CTRL_MASK));
        mostrarBarraOperaciones.setSelected(true);
        mostrarBarraOperaciones.setText("Mostrar barra de operaciones sobre imágenes");
        mostrarBarraOperaciones.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mostrarBarraOperacionesActionPerformed(evt);
            }
        });
        menuEdicion.add(mostrarBarraOperaciones);

        barraMenu.add(menuEdicion);

        menuImagen.setText("Imagen");

        bandCombineOpItem.setText("Negativo");
        bandCombineOpItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bandCombineOpItemActionPerformed(evt);
            }
        });
        menuImagen.add(bandCombineOpItem);

        colorConvertOpItem.setText("Transformacion a niveles de gris");
        colorConvertOpItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                colorConvertOpItemActionPerformed(evt);
            }
        });
        menuImagen.add(colorConvertOpItem);

        restaOpItem.setText("Resta");
        restaOpItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                restaOpItemActionPerformed(evt);
            }
        });
        menuImagen.add(restaOpItem);

        multiplicacionOpItem.setText("Multiplicacion");
        multiplicacionOpItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                multiplicacionOpItemActionPerformed(evt);
            }
        });
        menuImagen.add(multiplicacionOpItem);

        dosterciosUmbralizacionOpItem.setText("2/3 Umbralizacion");
        dosterciosUmbralizacionOpItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                dosterciosUmbralizacionOpItemActionPerformed(evt);
            }
        });
        menuImagen.add(dosterciosUmbralizacionOpItem);

        marilynOpItem.setText("Pop Art");
        marilynOpItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                marilynOpItemActionPerformed(evt);
            }
        });
        menuImagen.add(marilynOpItem);

        barraMenu.add(menuImagen);

        ayudaMenu.setText("Ayuda");

        acercadeItem.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_H, java.awt.event.InputEvent.CTRL_MASK));
        acercadeItem.setText("Acerca de");
        acercadeItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                acercadeItemActionPerformed(evt);
            }
        });
        ayudaMenu.add(acercadeItem);

        barraMenu.add(ayudaMenu);

        setJMenuBar(barraMenu);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void botonRojoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_botonRojoActionPerformed
        VentanaInterna vi = (VentanaInterna) (escritorio.getSelectedFrame());
        color=Color.RED;
        vi.getLienzo().setColor(color);
        cambiarColorBoton.setBackground(color);
    }//GEN-LAST:event_botonRojoActionPerformed

    private void botonLineaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_botonLineaActionPerformed
        VentanaInterna vi = (VentanaInterna) (escritorio.getSelectedFrame());
        labelEstado.setText("Linea");
        vi.getLienzo().setForma(1);
    }//GEN-LAST:event_botonLineaActionPerformed

    private void checkEditarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_checkEditarActionPerformed
        VentanaInterna vi = (VentanaInterna) (escritorio.getSelectedFrame());
        if(editar){
            editar=false;
        }else{
            editar=true;
        }
        vi.getLienzo().setEditar(editar);
        
    }//GEN-LAST:event_checkEditarActionPerformed

    private void mostrarBarraEstadoCheckBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mostrarBarraEstadoCheckBoxActionPerformed
        
        if(estado==false){
            this.labelEstado.setVisible(true);
            this.panelEstado.setVisible(true);
            estado=true;
        }else if(estado==true) {
            this.labelEstado.setVisible(false);
            this.panelEstado.setVisible(false);
            estado=false;               
        }
        if(!barraOpe && !estado)
            this.panelSur.setVisible(false);
        else
            this.panelSur.setVisible(true);
    }//GEN-LAST:event_mostrarBarraEstadoCheckBoxActionPerformed

    private void botonNegroActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_botonNegroActionPerformed
        VentanaInterna vi = (VentanaInterna) (escritorio.getSelectedFrame());
        color=Color.BLACK;
        vi.getLienzo().setColor(color);        
        cambiarColorBoton.setBackground(color);
    }//GEN-LAST:event_botonNegroActionPerformed

    private void botonAzulActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_botonAzulActionPerformed
        VentanaInterna vi = (VentanaInterna) (escritorio.getSelectedFrame());
        color = Color.BLUE;
        vi.getLienzo().setColor(color);
        cambiarColorBoton.setBackground(color);
    }//GEN-LAST:event_botonAzulActionPerformed

    private void botonBlancoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_botonBlancoActionPerformed
        VentanaInterna vi = (VentanaInterna) (escritorio.getSelectedFrame());
        color = Color.WHITE;
        vi.getLienzo().setColor(color);
        cambiarColorBoton.setBackground(color);
    }//GEN-LAST:event_botonBlancoActionPerformed

    private void botonVerdeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_botonVerdeActionPerformed
        VentanaInterna vi = (VentanaInterna) (escritorio.getSelectedFrame());
        color = Color.GREEN;
        vi.getLienzo().setColor(color);
        cambiarColorBoton.setBackground(color);
    }//GEN-LAST:event_botonVerdeActionPerformed

    private void botonAmarilloActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_botonAmarilloActionPerformed
        VentanaInterna vi = (VentanaInterna) (escritorio.getSelectedFrame());
        color = Color.YELLOW;
        vi.getLienzo().setColor(color);
        cambiarColorBoton.setBackground(color);
    }//GEN-LAST:event_botonAmarilloActionPerformed

    private void botonPuntoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_botonPuntoActionPerformed
        VentanaInterna vi = (VentanaInterna) (escritorio.getSelectedFrame());
        labelEstado.setText("Punto");
        vi.getLienzo().setForma(0);
        
    }//GEN-LAST:event_botonPuntoActionPerformed

    private void botonRectanguloActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_botonRectanguloActionPerformed
        VentanaInterna vi = (VentanaInterna) (escritorio.getSelectedFrame());
        labelEstado.setText("Rectangulo");
        vi.getLienzo().setForma(2);
    }//GEN-LAST:event_botonRectanguloActionPerformed

    private void botonElipseActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_botonElipseActionPerformed
        VentanaInterna vi = (VentanaInterna) (escritorio.getSelectedFrame());
        labelEstado.setText("Elipse");
        vi.getLienzo().setForma(3);
    }//GEN-LAST:event_botonElipseActionPerformed

    private void spinnerGrosorStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_spinnerGrosorStateChanged
        VentanaInterna vi = (VentanaInterna) (escritorio.getSelectedFrame());
        vi.getLienzo().setStroke((float)spinnerGrosor.getValue());
    }//GEN-LAST:event_spinnerGrosorStateChanged
    /**
     * Convierte una imagen de tipo ARGB en un de tipo RGB
     * @param imgSource BufferedImage que queremos cambiar.
     * @return BufferedImage tipo RGB
     */
    public static BufferedImage conversion(BufferedImage imgSource){
        BufferedImage imgAf = new BufferedImage(imgSource.getWidth(), imgSource.getHeight(),BufferedImage.TYPE_INT_RGB);
        Graphics g=imgAf.getGraphics();
        g.drawImage(imgSource, 0,0, null); 
        imgSource=imgAf;
        return imgSource;
    }
    
    
    
    private void brilloSliderStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_brilloSliderStateChanged
        VentanaInterna vi = (VentanaInterna) (escritorio.getSelectedFrame());
        if (vi != null && imgSrc != null) {
            RescaleOp rop = new RescaleOp(1.2F, brilloSlider.getValue(), null);
            BufferedImage imgdest = rop.filter(imgSrc, null);
            try{
                vi.getLienzo().setImagen(imgdest);
                vi.getLienzo().repaint();
            }catch(IllegalArgumentException e){
                    JOptionPane.showMessageDialog(null, "Error en la operación", //Mensaje
                        "Mensaje de Error", //Título
                           JOptionPane.ERROR_MESSAGE); //Tipo de mensaje
            }
        }
    }//GEN-LAST:event_brilloSliderStateChanged

    @SuppressWarnings("empty-statement")
    private void selectorMascaraActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_selectorMascaraActionPerformed
        //el combobox es un array usar getIndex en el if para saber cual hemos pinchado, ponerlo en el mismo orden que en KernelProdcer
        VentanaInterna vi = (VentanaInterna) (escritorio.getSelectedFrame());
        if (vi != null) {
            BufferedImage imgSource = vi.getLienzo().getImagen();
            Kernel k = null;
            int tipo = imgSource.getType();
            if(tipo!=BufferedImage.TYPE_INT_RGB){
                imgSource=conversion(imgSource);
            }
            switch(selectorMascara.getSelectedIndex()){
                case 0:
                    k = KernelProducer.createKernel(KernelProducer.TYPE_MEDIA_3x3);
                break;    
                case 1:
                    k = KernelProducer.createKernel(KernelProducer.TYPE_BINOMIAL_3x3);
                break;
                case 2:
                    k = KernelProducer.createKernel(KernelProducer.TYPE_ENFOQUE_3x3);
                break;
                case 3:
                    k = KernelProducer.createKernel(KernelProducer.TYPE_RELIEVE_3x3);
                break;
                case 4:
                    k = KernelProducer.createKernel(KernelProducer.TYPE_LAPLACIANA_3x3);
                break;
            };            
            
            if(imgSource!=null){
                try{  
                    ConvolveOp cop = new ConvolveOp(k);
                    BufferedImage imgdest = cop.filter(imgSource, null);
                    vi.getLienzo().setImagen(imgdest);
                    vi.getLienzo().repaint();
                } catch(IllegalArgumentException e){
                    JOptionPane.showMessageDialog(null, "Error en la operación", //Mensaje
                        "Mensaje de Error", //Título
                           JOptionPane.ERROR_MESSAGE); //Tipo de mensaje
                }
            }
        }
    }//GEN-LAST:event_selectorMascaraActionPerformed

    private void brilloSliderFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_brilloSliderFocusGained
        VentanaInterna vi = (VentanaInterna) (escritorio.getSelectedFrame());

        if(vi != null){
            imgSrc=vi.getLienzo().getImagen();
            if(imgSrc.getType()!=TYPE_INT_RGB){
             imgSrc=conversion(imgSrc);
            }
        }
    }//GEN-LAST:event_brilloSliderFocusGained

    private void brilloSliderFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_brilloSliderFocusLost
        imgSrc=null;
        brilloSlider.setValue(0);
    }//GEN-LAST:event_brilloSliderFocusLost

    private void bandCombineOpItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bandCombineOpItemActionPerformed
        VentanaInterna vi = (VentanaInterna) (escritorio.getSelectedFrame());
        if (vi != null) {
            BufferedImage imgSource = vi.getLienzo().getImagen();
            if(imgSource.getType()!=TYPE_INT_RGB){
             imgSrc=conversion(imgSource);
            }
            WritableRaster  rasterdest ;
            BufferedImage imgdest ;
            try{
                float [][] m = {{1.0F,0.0F,0.0F},{0.0F,0.0F,1.0F},{0.0F,1.0F,0.0F}};
                BandCombineOp bcop = new BandCombineOp( m , null );
                rasterdest = bcop.filter(imgSource.getRaster(),null);
                imgdest = new BufferedImage(imgSource.getColorModel(),rasterdest,false,null);
                vi.getLienzo().setImagen(imgdest);
                vi.getLienzo().repaint();
            }catch(Exception e){ 
                JOptionPane.showMessageDialog(null, "Error en la operación", //Mensaje
                        "Mensaje de Error", //Título
                           JOptionPane.ERROR_MESSAGE); //Tipo de mensaje
            }
        }
    }//GEN-LAST:event_bandCombineOpItemActionPerformed

    private void colorConvertOpItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_colorConvertOpItemActionPerformed
        VentanaInterna vi = (VentanaInterna) (escritorio.getSelectedFrame());
        if (vi != null) {
            BufferedImage imgSource = vi.getLienzo().getImagen();
            ICC_Profile ip;
            try{
                ip = ICC_Profile.getInstance(ColorSpace.CS_GRAY); 
                ColorSpace cs = new ICC_ColorSpace(ip);
                ColorConvertOp ccop = new ColorConvertOp(cs,null);
                BufferedImage imgdest = ccop.filter(imgSource,null);
                vi.getLienzo().setImagen(imgdest);
                vi.getLienzo().repaint();
            }catch(Exception e){ 
                JOptionPane.showMessageDialog(null, "Error en la operación", //Mensaje
                        "Mensaje de Error", //Título
                           JOptionPane.ERROR_MESSAGE); //Tipo de mensaje
            }
        }
    }//GEN-LAST:event_colorConvertOpItemActionPerformed

    private void botonIluminarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_botonIluminarActionPerformed
        VentanaInterna vi = (VentanaInterna) (escritorio.getSelectedFrame());
        if (vi != null) {          
            BufferedImage imgSource = vi.getLienzo().getImagen();            
            if(imgSource!=null){
                try{
                    LookupTable lt = LookupTableProducer.createLookupTable(LookupTableProducer.TYPE_LOGARITHM); 
                    LookupOp lop = new LookupOp(lt, null); 
                    BufferedImage imgdest = imgSource; 
                    lop.filter( imgSource,imgdest); 
                    vi.getLienzo().setImagen(imgdest);
                    vi.getLienzo().repaint();
                }catch(Exception e){
                    JOptionPane.showMessageDialog(null, "Error en la operación", //Mensaje
                        "Mensaje de Error", //Título
                           JOptionPane.ERROR_MESSAGE); //Tipo de mensaje
                }
            }
        }
    }//GEN-LAST:event_botonIluminarActionPerformed

    private void botonContrasteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_botonContrasteActionPerformed
        VentanaInterna vi = (VentanaInterna) (escritorio.getSelectedFrame());
        if (vi != null) {
            BufferedImage imgSource = vi.getLienzo().getImagen();            
            if(imgSource!=null){
                try{
                    LookupTable lt = LookupTableProducer.createLookupTable(LookupTableProducer.TYPE_SFUNCION); 
                    LookupOp lop = new LookupOp(lt, null); 
                    BufferedImage imgdest = imgSource; 
                    lop.filter( imgSource,imgdest); 
                    vi.getLienzo().setImagen(imgdest);
                    vi.getLienzo().repaint();
                }catch(Exception e){
                    JOptionPane.showMessageDialog(null, "Error en la operación", //Mensaje
                        "Mensaje de Error", //Título
                           JOptionPane.ERROR_MESSAGE); //Tipo de mensaje
                }
            }
        }
    }//GEN-LAST:event_botonContrasteActionPerformed

    private void botonOscurecerActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_botonOscurecerActionPerformed
        
        VentanaInterna vi = (VentanaInterna) (escritorio.getSelectedFrame());
        if (vi != null) {
            BufferedImage imgSource = vi.getLienzo().getImagen();            
            if(imgSource!=null){
                try{
                    LookupTable lt = LookupTableProducer.createLookupTable(LookupTableProducer.TYPE_GAMMA_CORRECTION); 
                    LookupOp lop = new LookupOp(lt, null); 
                    BufferedImage imgdest = imgSource; 
                    lop.filter( imgSource,imgdest); 
                    vi.getLienzo().setImagen(imgdest);
                    vi.getLienzo().repaint();
                }catch(Exception e){
                    JOptionPane.showMessageDialog(null, "Error en la operación", //Mensaje
                        "Mensaje de Error", //Título
                           JOptionPane.ERROR_MESSAGE); //Tipo de mensaje
                }
            }
        }
    }//GEN-LAST:event_botonOscurecerActionPerformed

    private void boton90ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_boton90ActionPerformed
        VentanaInterna vi = (VentanaInterna) (escritorio.getSelectedFrame());
        if (vi != null) {
            AffineTransform at;
            BufferedImage imgSource = vi.getLienzo().getImagen();
            at = AffineTransform.getRotateInstance(Math.toRadians(90.0),imgSource.getWidth()/2,imgSource.getHeight()/2);            
            try{
                AffineTransformOp atop = new AffineTransformOp(at,AffineTransformOp.TYPE_BILINEAR);
                BufferedImage imgdest = atop.filter( imgSource, null);                
                vi.getLienzo().setImagen(imgdest);
                vi.getLienzo().repaint();
            }catch(Exception e){ 
                JOptionPane.showMessageDialog(null, "Error en la operación", //Mensaje
                        "Mensaje de Error", //Título
                           JOptionPane.ERROR_MESSAGE); //Tipo de mensaje
            }
        }
    }//GEN-LAST:event_boton90ActionPerformed

    private void boton180ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_boton180ActionPerformed
        VentanaInterna vi = (VentanaInterna) (escritorio.getSelectedFrame());
        if (vi != null) {
            AffineTransform at;
            BufferedImage imgSource = vi.getLienzo().getImagen();
            at = AffineTransform.getRotateInstance(Math.toRadians(180.0),imgSource.getWidth()/2,imgSource.getHeight()/2);
            
            try{
                AffineTransformOp atop = new AffineTransformOp(at,AffineTransformOp.TYPE_BILINEAR);
                BufferedImage imgdest = atop.filter( imgSource, null);  
                vi.getLienzo().setImagen(imgdest);
                vi.getLienzo().repaint();
            }catch(Exception e){ 
                JOptionPane.showMessageDialog(null, "Error en la operación", //Mensaje
                        "Mensaje de Error", //Título
                           JOptionPane.ERROR_MESSAGE); //Tipo de mensaje
            }
        }        
    }//GEN-LAST:event_boton180ActionPerformed

    private void boton270ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_boton270ActionPerformed
        VentanaInterna vi = (VentanaInterna) (escritorio.getSelectedFrame());
        if (vi != null) {
            AffineTransform at;// = AffineTransform.getScaleInstance(1.25,1.25);
            BufferedImage imgSource = vi.getLienzo().getImagen();
            at = AffineTransform.getRotateInstance(Math.toRadians(270.0),imgSource.getWidth()/2,imgSource.getHeight()/2);
            //at = AffineTransform.getShearInstance(0.5,0.0);
            //at = AffineTransform.getTranslateInstance(20.0,20.0); 
            
            try{
                AffineTransformOp atop = new AffineTransformOp(at,AffineTransformOp.TYPE_BILINEAR);
                BufferedImage imgdest = atop.filter( imgSource, null);  
                vi.getLienzo().setImagen(imgdest);
                vi.getLienzo().repaint();
            }catch(Exception e){ 
                JOptionPane.showMessageDialog(null, "Error en la operación", //Mensaje
                        "Mensaje de Error", //Título
                           JOptionPane.ERROR_MESSAGE); //Tipo de mensaje
            }
        }
    }//GEN-LAST:event_boton270ActionPerformed

    private void sliderRotacionStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_sliderRotacionStateChanged
        VentanaInterna vi = (VentanaInterna) (escritorio.getSelectedFrame());
        
        if (vi != null && imgSrc != null) {          
                double r = Math.toRadians(sliderRotacion.getValue());
                Point p = new Point(imgSrc.getWidth()/2, imgSrc.getHeight()/2);
                AffineTransform at = AffineTransform.getRotateInstance(r,p.x,p.y);
                AffineTransformOp atop = new AffineTransformOp(at,AffineTransformOp.TYPE_BILINEAR);
                BufferedImage imgdest = atop.filter(imgSrc, null);
            try{
                
                vi.getLienzo().setImagen(imgdest);
                vi.getLienzo().repaint();
            }catch(Exception e){ 
                JOptionPane.showMessageDialog(null, "Error en la operación", //Mensaje
                        "Mensaje de Error", //Título
                           JOptionPane.ERROR_MESSAGE); //Tipo de mensaje
            }
        }
    }//GEN-LAST:event_sliderRotacionStateChanged

    private void botonAumentarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_botonAumentarActionPerformed
        VentanaInterna vi = (VentanaInterna) (escritorio.getSelectedFrame());
        if (vi != null) {
            AffineTransform at = AffineTransform.getScaleInstance(1.25,1.25);
            BufferedImage imgSource = vi.getLienzo().getImagen();
            try{
                AffineTransformOp atop = new AffineTransformOp(at,AffineTransformOp.TYPE_BILINEAR);
                BufferedImage imgdest = atop.filter( imgSource, null);  
                vi.getLienzo().setImagen(imgdest);
                vi.getLienzo().repaint();
            }catch(Exception e){ 
                JOptionPane.showMessageDialog(null, "Error en la operación", //Mensaje
                        "Mensaje de Error", //Título
                           JOptionPane.ERROR_MESSAGE); //Tipo de mensaje
            }
        }
    }//GEN-LAST:event_botonAumentarActionPerformed

    private void botonDisminuirActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_botonDisminuirActionPerformed
        VentanaInterna vi = (VentanaInterna) (escritorio.getSelectedFrame());
        if (vi != null) {
            AffineTransform at = AffineTransform.getScaleInstance(0.75,0.75);
            BufferedImage imgSource = vi.getLienzo().getImagen();
            try{
                AffineTransformOp atop = new AffineTransformOp(at,AffineTransformOp.TYPE_BILINEAR);
                BufferedImage imgdest = atop.filter( imgSource, null);  
                vi.getLienzo().setImagen(imgdest);
                vi.getLienzo().repaint();
            }catch(Exception e){ 
                JOptionPane.showMessageDialog(null, "Error en la operación", //Mensaje
                        "Mensaje de Error", //Título
                           JOptionPane.ERROR_MESSAGE); //Tipo de mensaje
            }
        }
    }//GEN-LAST:event_botonDisminuirActionPerformed

    private void sliderRotacionFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_sliderRotacionFocusGained
        VentanaInterna vi = (VentanaInterna) (escritorio.getSelectedFrame());
        if(vi != null){
            imgSrc=vi.getLienzo().getImagen();
        }
    }//GEN-LAST:event_sliderRotacionFocusGained
        
    private void sliderRotacionFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_sliderRotacionFocusLost
        imgSrc=null;
        brilloSlider.setValue(0);
    }//GEN-LAST:event_sliderRotacionFocusLost

    private void restaOpItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_restaOpItemActionPerformed
        VentanaInterna vi = (VentanaInterna)escritorio.getSelectedFrame();
        if (vi != null) {
            BufferedImage imgRight = vi.getLienzo().getImagen();
            VentanaInterna viNext = (VentanaInterna)escritorio.selectFrame(true);
            if(viNext != null){
                BufferedImage imgLeft = viNext.getLienzo().getImagen();
                RestaOp rop = new RestaOp(imgLeft);
                BufferedImage imgdest = rop.filter(imgRight, null);
                vi.getLienzo().setImagen(imgdest);
                vi.getLienzo().repaint();
            }
        }
    }//GEN-LAST:event_restaOpItemActionPerformed

    private void multiplicacionOpItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_multiplicacionOpItemActionPerformed
        VentanaInterna vi = (VentanaInterna)escritorio.getSelectedFrame();
        if (vi != null) {
            BufferedImage imgRight = vi.getLienzo().getImagen();
            VentanaInterna viNext = (VentanaInterna)escritorio.selectFrame(true);
            if(viNext != null){
                BufferedImage imgLeft = viNext.getLienzo().getImagen();
                MultiplicacionOp mop = new MultiplicacionOp(imgLeft);
                BufferedImage imgdest = mop.filter(imgRight, null);
                vi.getLienzo().setImagen(imgdest);
                vi.getLienzo().repaint();
            }
        }
    }//GEN-LAST:event_multiplicacionOpItemActionPerformed

    private void capturarBotonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_capturarBotonActionPerformed
        VentanaInternaJMFPlayer viv = (VentanaInternaJMFPlayer)escritorio.getSelectedFrame();
        BufferedImage captura = null;
        VentanaInterna vi = new VentanaInterna();
        try{
            captura=viv.getFrame(viv.getPlayer());
            vi.getLienzo().setImagen(captura);
            this.escritorio.add(vi);
            vi.setVisible(true);
            vi.setTitle("captura");
        }catch(Exception e){
            JOptionPane.showMessageDialog(null, "Error al capturar", //Mensaje
                        "Mensaje de Error", //Título
                           JOptionPane.ERROR_MESSAGE); //Tipo de mensaje
        }
    }//GEN-LAST:event_capturarBotonActionPerformed

    private void abrirMedioBotonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_abrirMedioBotonActionPerformed
    JFileChooser dlg = new JFileChooser();
        int resp = dlg.showOpenDialog(this);
        if( resp == JFileChooser.APPROVE_OPTION) {
            try{
                File f = dlg.getSelectedFile();
                if(f.getName().endsWith(".jpg") || f.getName().endsWith(".png") || f.getName().endsWith(".gif")){
                    BufferedImage img = ImageIO.read(f);
                    VentanaInterna vi = new VentanaInterna();
                    String alto=JOptionPane.showInputDialog("Ingrese el alto: ");
                    String ancho=JOptionPane.showInputDialog("Ingrese el ancho: ");
                    vi.getLienzo().setImagen(img, ancho,alto);
                    this.escritorio.add(vi);
                    vi.setVisible(true);
                    vi.setTitle(f.getName());
                }else if (f.getName().endsWith(".mp3")){
                    VentanaInternaReproductor vi = new VentanaInternaReproductor(f);
                    this.escritorio.add(vi);
                    vi.setVisible(true);
                    vi.setTitle(f.getName());
                }else if(f.getName().endsWith(".wav")){
                    VentanaInternaGrabador vi = new VentanaInternaGrabador(f);
                    this.escritorio.add(vi);
                    vi.setVisible(true);
                    vi.setTitle(f.getName());
                }else if (f.getName().endsWith(".avi")){
                    VentanaInternaJMFPlayer vi = VentanaInternaJMFPlayer.getInstance(f);
                    this.escritorio.add(vi);
                    vi.setVisible(true);
                    vi.play();
                    vi.setTitle(f.getName());
                }
            }catch(IOException ex){
                JOptionPane.showMessageDialog(null, "Error al abrir el archivo", //Mensaje
                        "Mensaje de Error", //Título
                           JOptionPane.ERROR_MESSAGE); //Tipo de mensaje
            }
        }
    }//GEN-LAST:event_abrirMedioBotonActionPerformed

    private void camaraBotonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_camaraBotonActionPerformed
        try{
            VentanaInternaCamara vi = null;
            vi.getInstance();
            this.escritorio.add(vi);
            vi.setVisible(true);
            vi.play();
        }catch(Exception ex){
            JOptionPane.showMessageDialog(null, "Error al abrir la cámara", //Mensaje
                        "Mensaje de Error", //Título
                           JOptionPane.ERROR_MESSAGE); //Tipo de mensaje
        }
    }//GEN-LAST:event_camaraBotonActionPerformed

    private void cambiarColorBotonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cambiarColorBotonActionPerformed
        // mostrar JColorChooser cuando el usuario haga clic en el botón
        VentanaInterna vi = (VentanaInterna) (escritorio.getSelectedFrame());    
        color = JColorChooser.showDialog(this, "Seleccione un color", color);
        cambiarColorBoton.setBackground(color);
        // establecer color predeterminado, si no se devuelve un color 
        if ( color == null )
            color = Color.BLACK;
        vi.getLienzo().setColor(color);
    }//GEN-LAST:event_cambiarColorBotonActionPerformed

    private void acercadeItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_acercadeItemActionPerformed
        JOptionPane.showMessageDialog(null, "Nombre de programa: Evaluación Final.\nVersión: v1.0 \n"
                + "Autor: Álvaro Maximino Linares Herrera", "Acerca de...", 1, null);
    }//GEN-LAST:event_acercadeItemActionPerformed

    private void mostrarBarraDibujoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mostrarBarraDibujoActionPerformed
        if(barraDib==false){
            this.panelTabuladoDibujo.setVisible(true);
            barraDib=true;
        }else if(barraDib==true) {
            this.panelTabuladoDibujo.setVisible(false);
            barraDib=false;
        }
    }//GEN-LAST:event_mostrarBarraDibujoActionPerformed

    private void mostrarBarraOperacionesActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mostrarBarraOperacionesActionPerformed
        if(barraOpe==false){
            this.panelTabuladoOperaciones.setVisible(true);
            barraOpe=true;
        }else if(barraOpe==true) {
            this.panelTabuladoOperaciones.setVisible(false);
            barraOpe=false;
        }
        if(!barraOpe && !estado)
            this.panelSur.setVisible(false);
        else
            this.panelSur.setVisible(true);
    }//GEN-LAST:event_mostrarBarraOperacionesActionPerformed

    private void nuevoBotonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_nuevoBotonActionPerformed
        VentanaInterna vi = new VentanaInterna();
        escritorio.add(vi);
        vi.setVisible(true);
        vi.setTitle("nueva");
    }//GEN-LAST:event_nuevoBotonActionPerformed

    private void guardarMenuActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_guardarMenuActionPerformed
        JFileChooser dlg = new JFileChooser();
        int resp = dlg.showSaveDialog(this);
        if( resp == JFileChooser.APPROVE_OPTION) {
            try{
                File f = dlg.getSelectedFile();//Modificar a partir de aquí como se ha hecho con el abrir
                VentanaInterna vi = (VentanaInterna)escritorio.getSelectedFrame();
                BufferedImage img = vi.getLienzo().getImagen();
                vi.getLienzo().vuelque();
                ImageIO.write(img,"jpg",f);
            }catch(IOException ex){
                JOptionPane.showMessageDialog(null, "Error al guardar la imágen", //Mensaje
                        "Mensaje de Error", //Título
                           JOptionPane.ERROR_MESSAGE); //Tipo de mensaje
            }
        }
    }//GEN-LAST:event_guardarMenuActionPerformed

    private void nuevoMenuActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_nuevoMenuActionPerformed
        VentanaInterna vi = new VentanaInterna();
        escritorio.add(vi);
        vi.setVisible(true);
        vi.setTitle("nueva");
        vi.getLienzo().setColor(color);
        vi.getLienzo().setColorRelleno(colorRelleno);
        vi.getLienzo().setDiscontinuo(discontinuo);
        vi.getLienzo().setStroke((float)spinnerGrosor.getValue());
        vi.getLienzo().setRelleno(relleno);
        vi.getLienzo().setDegradadoH(degradadoH);
        vi.getLienzo().setDegradadoV(degradadoV);
        vi.getLienzo().setEditar(editar);
    }//GEN-LAST:event_nuevoMenuActionPerformed

    private void sliderUmbralStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_sliderUmbralStateChanged
        VentanaInterna vi = (VentanaInterna) (escritorio.getSelectedFrame());
       
        if (vi != null && imgSrc != null) {
            ThresholdOp to;
            if(!umbralColor){
            to= new ThresholdOp(sliderUmbral.getValue());
            to.setType(ThresholdOp.TYPE_GREY_LEVEL);
            }
            else{
                to=new ThresholdOp(color, sliderUmbral.getValue());
                to.setType(ThresholdOp.TYPE_COLOR);
            }
            BufferedImage imgdest=to.filter(imgSrc, null);
            try{
                vi.getLienzo().setImagen(imgdest);
                vi.getLienzo().repaint();
            }catch(IllegalArgumentException e){
                    JOptionPane.showMessageDialog(null, "Error en la operación", //Mensaje
                        "Mensaje de Error", //Título
                           JOptionPane.ERROR_MESSAGE); //Tipo de mensaje
            }
        }

    }//GEN-LAST:event_sliderUmbralStateChanged

    private void sliderUmbralFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_sliderUmbralFocusGained
         VentanaInterna vi = (VentanaInterna) (escritorio.getSelectedFrame());

        if(vi != null){
            imgSrc=vi.getLienzo().getImagen();
            if(imgSrc.getType()!=TYPE_INT_RGB){
             imgSrc=conversion(imgSrc);
            }
        }
    }//GEN-LAST:event_sliderUmbralFocusGained

    private void sliderUmbralFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_sliderUmbralFocusLost
        imgSrc=null;
        sliderUmbral.setValue(0);
    }//GEN-LAST:event_sliderUmbralFocusLost

    private void duplicarBotonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_duplicarBotonActionPerformed
        VentanaInterna vi = (VentanaInterna) (escritorio.getSelectedFrame());
      
        if(vi!=null){
            BufferedImage imgDup = vi.getLienzo().getImagen();
            VentanaInterna vic = new VentanaInterna();
                    vic.getLienzo().setImagen(imgDup);
                    this.escritorio.add(vic);
                    vic.setVisible(true);
                    vic.setTitle(vi.getTitle());
        }
    }//GEN-LAST:event_duplicarBotonActionPerformed

    private void discontCheckActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_discontCheckActionPerformed
        VentanaInterna vi = (VentanaInterna) (escritorio.getSelectedFrame());
        if(discontinuo){
            discontinuo=false;
        }else{
            discontinuo=true;
        }
        vi.getLienzo().setDiscontinuo(discontinuo);
        vi.getLienzo().setStroke((float)spinnerGrosor.getValue());
    }//GEN-LAST:event_discontCheckActionPerformed

    private void colorRellenoBotonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_colorRellenoBotonActionPerformed
        // mostrar JColorChooser cuando el usuario haga clic en el botón
        VentanaInterna vi = (VentanaInterna) (escritorio.getSelectedFrame());    
        colorRelleno = JColorChooser.showDialog(this, "Seleccione un color", colorRelleno );
        colorRellenoBoton.setBackground(colorRelleno);
        // establecer color predeterminado, si no se devuelve un color 
        if ( colorRelleno == null )
            colorRelleno = Color.BLACK;
        vi.getLienzo().setColorRelleno(colorRelleno);
    }//GEN-LAST:event_colorRellenoBotonActionPerformed

    private void umbralizarColorCheckBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_umbralizarColorCheckBoxActionPerformed
        if(umbralColor)
            umbralColor=false;
        else
            umbralColor=true;
    }//GEN-LAST:event_umbralizarColorCheckBoxActionPerformed

    private void botonCurvaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_botonCurvaActionPerformed
        VentanaInterna vi = (VentanaInterna) (escritorio.getSelectedFrame());
        labelEstado.setText("Curva");
        vi.getLienzo().setForma(4);
    }//GEN-LAST:event_botonCurvaActionPerformed

    private void guardarBotonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_guardarBotonActionPerformed
        JFileChooser dlg = new JFileChooser();
        int resp = dlg.showSaveDialog(this);
        if( resp == JFileChooser.APPROVE_OPTION) {
            try{
                File f = dlg.getSelectedFile();//Modificar a partir de aquí como se ha hecho con el abrir
                VentanaInterna vi = (VentanaInterna)escritorio.getSelectedFrame();
                BufferedImage img = vi.getLienzo().getImagen();
                vi.getLienzo().vuelque();
                ImageIO.write(img,"jpg",f);
            }catch(IOException ex){
                JOptionPane.showMessageDialog(null, "Error al guardar la imágen", //Mensaje
                        "Mensaje de Error", //Título
                           JOptionPane.ERROR_MESSAGE); //Tipo de mensaje
            }
        }
    }//GEN-LAST:event_guardarBotonActionPerformed

    private void sinRellenoBotonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_sinRellenoBotonActionPerformed
        VentanaInterna vi = (VentanaInterna) (escritorio.getSelectedFrame());
        if(degradadoH){
            vi.getLienzo().setDegradadoH(false);
            this.degradadoH = false;
        }
        if(degradadoV){
            vi.getLienzo().setDegradadoV(false);
            this.degradadoV = false;
        }
        if(relleno){
            vi.getLienzo().setRelleno(false);
            this.relleno = false;
        }
        
        
    }//GEN-LAST:event_sinRellenoBotonActionPerformed

    private void degradadoHBotonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_degradadoHBotonActionPerformed
        VentanaInterna vi = (VentanaInterna) (escritorio.getSelectedFrame());
        if(degradadoH==false){
            if(degradadoV){
                vi.getLienzo().setDegradadoV(false);
                this.degradadoV = false;
            }
            if(relleno){
                vi.getLienzo().setRelleno(false);
                this.relleno = false;
            }
            vi.getLienzo().setDegradadoH(true);
            this.degradadoH = true;
        }
        
    }//GEN-LAST:event_degradadoHBotonActionPerformed

    private void degradadoVBotonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_degradadoVBotonActionPerformed
        VentanaInterna vi = (VentanaInterna) (escritorio.getSelectedFrame());
        if(degradadoV==false){
            if(degradadoH){
                vi.getLienzo().setDegradadoH(false);
                this.degradadoH = false;
            }
            if(relleno){
                vi.getLienzo().setRelleno(false);
                this.relleno = false;
            }
            vi.getLienzo().setDegradadoV(true);
            this.degradadoV = true;
        }
        
    }//GEN-LAST:event_degradadoVBotonActionPerformed

    private void rellenoLisoBotonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rellenoLisoBotonActionPerformed
        VentanaInterna vi = (VentanaInterna) (escritorio.getSelectedFrame());
        if(relleno==false){
            if(degradadoH){
                vi.getLienzo().setDegradadoH(false);
                this.degradadoH = false;
            }
            if(degradadoV){
                vi.getLienzo().setDegradadoV(false);
                this.degradadoV = false;
            }
            vi.getLienzo().setRelleno(true);
            this.relleno = true;
        }
        
    }//GEN-LAST:event_rellenoLisoBotonActionPerformed

    private void camaraMenuActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_camaraMenuActionPerformed
        try{
            VentanaInternaCamara vi = null;
            vi.getInstance();
            this.escritorio.add(vi);
            vi.setVisible(true);
            vi.play();
        }catch(Exception ex){
            System.err.println("Error al abrir la camara");
        }
    }//GEN-LAST:event_camaraMenuActionPerformed

    private void abrirMusicaMenuActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_abrirMusicaMenuActionPerformed
         JFileChooser dlg = new JFileChooser();
        int resp = dlg.showOpenDialog(this);
        if( resp == JFileChooser.APPROVE_OPTION) {
        
                File f = dlg.getSelectedFile();
                    VentanaInternaReproductor vi = new VentanaInternaReproductor(f);
                    this.escritorio.add(vi);
                    vi.setVisible(true);
                    vi.setTitle(f.getName());
         
        }
    }//GEN-LAST:event_abrirMusicaMenuActionPerformed

    private void abrirImagenMenuActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_abrirImagenMenuActionPerformed
         JFileChooser dlg = new JFileChooser();
        int resp = dlg.showOpenDialog(this);
        if( resp == JFileChooser.APPROVE_OPTION) {
            try{
                File f = dlg.getSelectedFile();
                BufferedImage img = ImageIO.read(f);
                VentanaInterna vi = new VentanaInterna();
                String alto=JOptionPane.showInputDialog("Ingrese el alto: ");
                String ancho=JOptionPane.showInputDialog("Ingrese el ancho: ");
                vi.getLienzo().setImagen(img, ancho,alto);
                this.escritorio.add(vi);
                vi.setVisible(true);
                vi.setTitle(f.getName());
            }catch(IOException e){
                JOptionPane.showMessageDialog(null, "Error al abrir la imágen", //Mensaje
                    "Mensaje de Error", //Título
                    JOptionPane.ERROR_MESSAGE); //Tipo de mensaje
            }
        }
    }//GEN-LAST:event_abrirImagenMenuActionPerformed

    private void abrirGrabadorMenuActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_abrirGrabadorMenuActionPerformed
        JFileChooser dlg = new JFileChooser();
        int resp = dlg.showOpenDialog(this);
        if( resp == JFileChooser.APPROVE_OPTION) {
            File f = dlg.getSelectedFile();
            VentanaInternaGrabador vi = new VentanaInternaGrabador(f);
            this.escritorio.add(vi);
            vi.setVisible(true);
            vi.setTitle(f.getName());   
        }
    }//GEN-LAST:event_abrirGrabadorMenuActionPerformed

    private void abrirVideoMenuActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_abrirVideoMenuActionPerformed
         JFileChooser dlg = new JFileChooser();
        int resp = dlg.showOpenDialog(this);
        if( resp == JFileChooser.APPROVE_OPTION) {
            File f = dlg.getSelectedFile();
             if (f.getName().endsWith(".avi")){
                 VentanaInternaJMFPlayer vi = VentanaInternaJMFPlayer.getInstance(f);
                 this.escritorio.add(vi);
                 vi.setVisible(true);
                 vi.play();
                 vi.setTitle(f.getName());
             }
        }
    }//GEN-LAST:event_abrirVideoMenuActionPerformed

    private void dosterciosUmbralizacionOpItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_dosterciosUmbralizacionOpItemActionPerformed
        VentanaInterna vi = (VentanaInterna) (escritorio.getSelectedFrame());
        if (vi != null) {
            BufferedImage imgSource = vi.getLienzo().getImagen();
            if(imgSource.getType()!=TYPE_INT_RGB){
             imgSrc=conversion(imgSource);
            }
            try{
                DosTerciosUmbralizacionOp dtop = new DosTerciosUmbralizacionOp(128);
                BufferedImage imgdest = dtop.filter( imgSource, null);
                vi.getLienzo().setImagen(imgdest);
                vi.getLienzo().repaint();
            }catch(Exception e){ 
                JOptionPane.showMessageDialog(null, "Error en la operación", //Mensaje
                        "Mensaje de Error", //Título
                           JOptionPane.ERROR_MESSAGE); //Tipo de mensaje
            }
        }
    }//GEN-LAST:event_dosterciosUmbralizacionOpItemActionPerformed

    private void marilynOpItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_marilynOpItemActionPerformed
       VentanaInterna vi = (VentanaInterna) (escritorio.getSelectedFrame());
        if (vi != null) {
            BufferedImage imgSource = vi.getLienzo().getImagen();
            if(imgSource.getType()!=TYPE_INT_RGB){
             imgSrc=conversion(imgSource);
            }
            try{
                //Operación propia.
                MarilynOp mop = new MarilynOp();
                BufferedImage imgdest = mop.filter( imgSource, null);        
                vi.getLienzo().setImagen(imgdest);
                vi.getLienzo().repaint();
            }catch(Exception e){ 
                JOptionPane.showMessageDialog(null, "Error en la operación", //Mensaje
                        "Mensaje de Error", //Título
                           JOptionPane.ERROR_MESSAGE); //Tipo de mensaje
            }
        }
    }//GEN-LAST:event_marilynOpItemActionPerformed

    private void popArtBotonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_popArtBotonActionPerformed
        VentanaInterna vi = (VentanaInterna) (escritorio.getSelectedFrame());
        if (vi != null) {
            BufferedImage imgSource = vi.getLienzo().getImagen();
            if(imgSource.getType()!=TYPE_INT_RGB){
             imgSrc=conversion(imgSource);
            }
            try{
                //Operación propia.
                MarilynOp mop = new MarilynOp();
                BufferedImage imgdest = mop.filter( imgSource, null);        
                vi.getLienzo().setImagen(imgdest);
                vi.getLienzo().repaint();
            }catch(Exception e){ 
                JOptionPane.showMessageDialog(null, "Error en la operación", //Mensaje
                        "Mensaje de Error", //Título
                           JOptionPane.ERROR_MESSAGE); //Tipo de mensaje
            }
        }
    }//GEN-LAST:event_popArtBotonActionPerformed

    private void negativoBotonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_negativoBotonActionPerformed
         VentanaInterna vi = (VentanaInterna) (escritorio.getSelectedFrame());
        if (vi != null) {
            BufferedImage imgSource = vi.getLienzo().getImagen();
            if(imgSource.getType()!=TYPE_INT_RGB){
             imgSrc=conversion(imgSource);
            }
            WritableRaster  rasterdest ;
            BufferedImage imgdest ;
            try{
                float [][] m = {{1.0F,0.0F,0.0F},{0.0F,0.0F,1.0F},{0.0F,1.0F,0.0F}};
                BandCombineOp bcop = new BandCombineOp( m , null );
                rasterdest = bcop.filter(imgSource.getRaster(),null);
                imgdest = new BufferedImage(imgSource.getColorModel(),rasterdest,false,null);
                vi.getLienzo().setImagen(imgdest);
                vi.getLienzo().repaint();
            }catch(Exception e){ 
                JOptionPane.showMessageDialog(null, "Error en la operación", //Mensaje
                        "Mensaje de Error", //Título
                           JOptionPane.ERROR_MESSAGE); //Tipo de mensaje
            }
        }
    }//GEN-LAST:event_negativoBotonActionPerformed

    private void grisesBotonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_grisesBotonActionPerformed
        VentanaInterna vi = (VentanaInterna) (escritorio.getSelectedFrame());
        if (vi != null) {
            BufferedImage imgSource = vi.getLienzo().getImagen();
            ICC_Profile ip;
            try{
                ip = ICC_Profile.getInstance(ColorSpace.CS_GRAY); 
                ColorSpace cs = new ICC_ColorSpace(ip);
                ColorConvertOp ccop = new ColorConvertOp(cs,null);
                BufferedImage imgdest = ccop.filter(imgSource,null);
                vi.getLienzo().setImagen(imgdest);
                vi.getLienzo().repaint();
            }catch(Exception e){ 
                JOptionPane.showMessageDialog(null, "Error en la operación", //Mensaje
                        "Mensaje de Error", //Título
                           JOptionPane.ERROR_MESSAGE); //Tipo de mensaje
            }
        }
    }//GEN-LAST:event_grisesBotonActionPerformed

    private void dosterciosBotonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_dosterciosBotonActionPerformed
       VentanaInterna vi = (VentanaInterna) (escritorio.getSelectedFrame());
        if (vi != null) {
            BufferedImage imgSource = vi.getLienzo().getImagen();
            if(imgSource.getType()!=TYPE_INT_RGB){
             imgSrc=conversion(imgSource);
            }
            try{
                DosTerciosUmbralizacionOp dtop = new DosTerciosUmbralizacionOp(128);
                BufferedImage imgdest = dtop.filter( imgSource, null);
                vi.getLienzo().setImagen(imgdest);
                vi.getLienzo().repaint();
            }catch(Exception e){ 
                JOptionPane.showMessageDialog(null, "Error en la operación", //Mensaje
                        "Mensaje de Error", //Título
                           JOptionPane.ERROR_MESSAGE); //Tipo de mensaje
            }
        }
    }//GEN-LAST:event_dosterciosBotonActionPerformed
   
                                             
        
                                        
        
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JMenuItem abrirGrabadorMenu;
    private javax.swing.JMenuItem abrirImagenMenu;
    private javax.swing.JButton abrirMedioBoton;
    private javax.swing.JMenuItem abrirMusicaMenu;
    private javax.swing.JMenuItem abrirVideoMenu;
    private javax.swing.JMenuItem acercadeItem;
    private javax.swing.JTextArea areaTexto;
    private javax.swing.JMenu ayudaMenu;
    private javax.swing.JMenuItem bandCombineOpItem;
    private javax.swing.JMenuBar barraMenu;
    private javax.swing.JScrollPane barraScroll;
    private javax.swing.JButton boton180;
    private javax.swing.JButton boton270;
    private javax.swing.JButton boton90;
    private javax.swing.JButton botonAmarillo;
    private javax.swing.JButton botonAumentar;
    private javax.swing.JButton botonAzul;
    private javax.swing.JButton botonBlanco;
    private javax.swing.JButton botonContraste;
    private javax.swing.JToggleButton botonCurva;
    private javax.swing.JButton botonDisminuir;
    private javax.swing.JToggleButton botonElipse;
    private javax.swing.JButton botonIluminar;
    private javax.swing.JToggleButton botonLinea;
    private javax.swing.JButton botonNegro;
    private javax.swing.JButton botonOscurecer;
    private javax.swing.JToggleButton botonPunto;
    private javax.swing.JToggleButton botonRectangulo;
    private javax.swing.JButton botonRojo;
    private javax.swing.JButton botonVerde;
    private javax.swing.JSlider brilloSlider;
    private javax.swing.JButton camaraBoton;
    private javax.swing.JMenuItem camaraMenu;
    private javax.swing.JButton cambiarColorBoton;
    private javax.swing.JButton capturarBoton;
    private javax.swing.JCheckBox checkEditar;
    private javax.swing.JMenuItem colorConvertOpItem;
    private javax.swing.JButton colorRellenoBoton;
    private javax.swing.JToggleButton degradadoHBoton;
    private javax.swing.JToggleButton degradadoVBoton;
    private javax.swing.JCheckBox discontCheck;
    private javax.swing.JButton dosterciosBoton;
    private javax.swing.JMenuItem dosterciosUmbralizacionOpItem;
    private javax.swing.JButton duplicarBoton;
    private javax.swing.JDesktopPane escritorio;
    private javax.swing.JButton grisesBoton;
    private javax.swing.ButtonGroup grupoColores;
    private javax.swing.ButtonGroup grupoDibujo;
    private javax.swing.ButtonGroup grupoRelleno;
    private javax.swing.JButton guardarBoton;
    private javax.swing.JMenuItem guardarMenu;
    private javax.swing.JLabel labelEstado;
    private javax.swing.JMenuItem marilynOpItem;
    private javax.swing.JMenu menuAbrir;
    private javax.swing.JMenu menuArchivo;
    private javax.swing.JMenu menuEdicion;
    private javax.swing.JMenu menuImagen;
    private javax.swing.JCheckBoxMenuItem mostrarBarraDibujo;
    private javax.swing.JCheckBoxMenuItem mostrarBarraEstadoCheckBox;
    private javax.swing.JCheckBoxMenuItem mostrarBarraOperaciones;
    private javax.swing.JMenuItem multiplicacionOpItem;
    private javax.swing.JButton negativoBoton;
    private javax.swing.JButton nuevoBoton;
    private javax.swing.JMenuItem nuevoMenu;
    private javax.swing.JPanel panelAtributos;
    private javax.swing.JPanel panelBotones;
    private javax.swing.JPanel panelBrillo;
    private javax.swing.JPanel panelColor;
    private javax.swing.JPanel panelContraste;
    private javax.swing.JPanel panelDibujo;
    private javax.swing.JPanel panelEdicion;
    private javax.swing.JPanel panelEscalado;
    private javax.swing.JPanel panelEstado;
    private javax.swing.JPanel panelFormas;
    private javax.swing.JPanel panelGeneral;
    private javax.swing.JPanel panelGrosor;
    private javax.swing.JPanel panelMascara;
    private javax.swing.JPanel panelNorte;
    private javax.swing.JPanel panelOperaciones;
    private javax.swing.JPanel panelOperaciones2;
    private javax.swing.JPanel panelRotacion;
    private javax.swing.JPanel panelSur;
    private javax.swing.JTabbedPane panelTabuladoDibujo;
    private javax.swing.JTabbedPane panelTabuladoOperaciones;
    private javax.swing.JPanel panelTipoFormas;
    private javax.swing.JPanel panelUmbralizacion;
    private javax.swing.JButton popArtBoton;
    private javax.swing.JToggleButton rellenoLisoBoton;
    private javax.swing.JMenuItem restaOpItem;
    private javax.swing.JComboBox selectorMascara;
    private javax.swing.JToggleButton sinRellenoBoton;
    private javax.swing.JSlider sliderRotacion;
    private javax.swing.JSlider sliderUmbral;
    private javax.swing.JSpinner spinnerGrosor;
    private javax.swing.JCheckBox umbralizarColorCheckBox;
    // End of variables declaration//GEN-END:variables
}
